# Default values for metacat.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
metacat:
  applicationContext: metacat
  databaseHostname: host.docker.internal    # host.docker.internal is equivalent to "localhost"
  databaseName: metacat
  guidDoiEnabled: true
  serverHostName: metacat.example.com
  serverHttpPort: "8080"
  serverHttpSslPort: "8443"
  solrHostname: host.docker.internal        # host.docker.internal is equivalent to "localhost"

image:
  #TODO pull from github container repo, e.g. see indexer: ghcr.io/dataoneorg/dataone-index-worker
  repository: metacat
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
  
global:
  #TODO
  #storageClass: csi-rbd-sc
  #solrPort: &global-solr-port 8983

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
#TODO
#  fsGroup: metacat
#  runAsUser: metacat
#  capabilities:
#    readOnlyRootFilesystem: true
#    runAsNonRoot: true
  #   drop:
  #   - ALL

service:
  type: ClusterIP     # Headless ClusterIP required for StatefulSet
  ports:
  - port: 8080
    name: metacat-web
  - port: 8009
    name: apache-connect
  - port: 5701
    name: hazelcast

ingress:
  #TODO
  enabled: false
  className: ""
  annotations: {}
  tls: []
 
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with limited
  # resources, such as Minikube.

autoscaling:
  enabled: false

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  ## @param persistence.enabled
  ## Enable metacat data persistence using Persistent Volume Claims
  ##
  ## Always set to 'enabled: true' for production deployments.
  ##
  ## For development/testing ONLY: Setting 'enabled: false' will result in the use of a temporary
  ## 'emptyDir' for saving metacat's data. This means the data saved by metacat WILL BE LOST when
  ## the pod is deleted!
  ##
  enabled: true
  ## @param persistence.storageClass Storage class of backing PVC
  ##
  ## If <storageClass> is defined -- storageClassName: <storageClass>
  ##
  ## If <storageClass> set to "-"  -- storageClassName: "" -- which disables dynamic PV provisioning
  ##   (meaning claim can only be bound to an existing PV, not a dynamically-provisioned one) with
  ##   no class (no annotation, or one set equal to "")
  ##
  ## NOTE when using StatefulSet with a defaultClaimTemplate - leaving storageClass unset/null does
  ## NOT choose the default provisioner for dynamic provisioning of the underlying PV, as expected!
  ## Instead, inspect your cluster to see what stoprageClass is set as default:
  ##    $  kubectl get storageclass
  ## ...and then explicitly set storageClass to match the name of the default storageclass
  ## (e.g. for Rancher Desktop -- storageclass: local-path
  ##
  storageClass: local-path
  ## @param persistence.existingClaim
  ## Set a value for 'existingClaim' only if you want to re-use a Persistent Volume Claim that has
  ## already been set up by a k8s admin ahead of time.
  ## Leaving it blank will cause a pvc to be created dynamically using volumeClaimTemplates.
  ##
  existingClaim: ""
  ## @param primary.persistence.size PVC Storage Request for metacat volume
  ##
  size: 1Gi
