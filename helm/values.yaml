## Default values for metacat.
## This is a YAML-formatted file.
##
## The metacat section can contain any properties that will override those in
## metacat-site.properties and metacat.properties. The properties that have been pre-populated
## in this section comprise the minimum set of values needed to run the app and the test suite on
## a development machine.
##
## NOTE that certain credentials must also be provided, via Kubernetes Secrets, in order for
## metacat to function correctly. These credentials are listed in ./admin/secrets.yaml, in the
## form of environment variables expected by metacat at runtime. Also see the mappings in the
## `application.envSecretKeys` property in `metacat.properties`, to determine which metacat
## property corresponds to each of these environment variables
##
metacat:
  ## @param metacat.application.context
  ## the application context to use - for example, if your application is hosted at
  ## https://mydomain.org, and you define the context to be "metacat", then the url to access the
  ## application will be https://mydomain.org/metacat/
  ##
  application.context: metacat
  ## @param auth.admin.setupUsername
  ## The primary admin username that will be used to authenticate with the new metacat instance
  ## and apply any necessary setup steps, database upgrades etc. upon first run.
  ## NOTES:
  ## 1. The corresponding password must be set as a Secret (see ./admin/secrets.yaml), with the
  ##    key METACAT_ADMINISTRATOR_PASSWORD
  ## 2. This account will be created if it doesn't already exist in the `passwords.xml` file on
  ##    metacat's mounted PersistentVolume (see .Values.persistence)
  ## 3. This username MUST appear on the list of authorized administrators, otherwise
  ##    container startup will fail (see @param auth.administrators)
  ##
  administrator.username: admin@localhost
  ## METACAT_AUTH_ADMINISTRATORS is a colon-separated list of admin usernames or LDAP-style
  ## Distinguished Names denoting the users who may log into metacat with administrator
  ## privileges.
  ##
  auth.administrators: admin@localhost:uid=jones,o=NCEAS,dc=ecoinformatics,dc=org
  ## @param database.connectionURI
  ## connection URI for the postgres database, in the form: jdbc:postgresql://hostname/database-name
  ## host.docker.internal is equivalent to "localhost"
  ##
  database.connectionURI: jdbc:postgresql://host.docker.internal/metacat
  ## Allow users to publish Digital Object Identifiers for the data in this metacat instance?
  ## (see doi.org).
  ## If true, you will also need to define guid.doi.username $ guid.doi.password (see secrets.yaml)
  ## and either override or use the defaults in metacat.properties for all the entries that begin
  ## with: "guid.doi."
  ##
  guid.doi.enabled: true
  ## @param metacat.server.httpPort
  ## 
  server.httpPort: 8080
  ## @param metacat.server.httpSSLPort
  ##
  server.httpSSLPort: 8443
  ## @param metacat.server.name
  ##
  server.name: metacat.example.com
  ## @param metacat.solr.baseURL
  # host.docker.internal is equivalent to "localhost"
  solr.baseURL: http://host.docker.internal:8983/solr
  ##
  ## @param metacat.replication.logdir
  replication.logdir: /var/metacat/logs

image:
  #TODO pull from github container repo, e.g. see indexer: ghcr.io/dataoneorg/dataone-index-worker
  repository: metacat
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  ## @param image.debug Specify if debug values should be set
  ## Set to true if you would like to see extra information in metacat/tomcat logs.
  ## (Sets the Log4J rootLogger level to "DEBUG")
  ## * * WARNING - FOR TESTING ONLY! * * May result in secrets being printed to logs in plain text.
  ##
  debug: false

imagePullSecrets: []
  
global:
  #TODO
  #storageClass: csi-rbd-sc
  #solrPort: &global-solr-port 8983

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
#TODO
#  fsGroup: metacat
#  runAsUser: metacat
#  capabilities:
#    readOnlyRootFilesystem: true
#    runAsNonRoot: true
  #   drop:
  #   - ALL

service:
  type: ClusterIP     # Headless ClusterIP required for StatefulSet
  ports:
  - port: 8080
    name: metacat-web
  - port: 8009
    name: apache-connect
  - port: 5701
    name: hazelcast

ingress:
  #TODO
  enabled: false
  className: ""
  annotations: {}
  tls: []
 
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with limited
  # resources, such as Minikube.

autoscaling:
  enabled: false

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  ## @param persistence.enabled
  ## Enable metacat data persistence using Persistent Volume Claims
  ##
  ## Always set to 'enabled: true' for production deployments.
  ##
  ## For development/testing ONLY: Setting 'enabled: false' will result in the use of a temporary
  ## 'emptyDir' for saving metacat's data. This means the data saved by metacat WILL BE LOST when
  ## the pod is deleted!
  ##
  enabled: true
  ## @param persistence.storageClass Storage class of backing PVC
  ##
  ## If <storageClass> is defined,  storageClassName: <storageClass>
  ##
  ## If <storageClass> set to "-",  storageClassName: ""  -- which disables dynamic PV provisioning
  ##   (meaning claim can only be bound to an existing PV, not a dynamically-provisioned one) with
  ##   no class (no annotation, or one set equal to "")
  ##
  ## NOTE when using StatefulSet with a defaultClaimTemplate - leaving storageClass unset/null does
  ## NOT choose the default provisioner for dynamic provisioning of the underlying PV, as expected!
  ## Instead, inspect your cluster to see what stoprageClass is set as default:
  ##    $  kubectl get storageclass
  ## ...and then explicitly set storageClass to match the name of the default storageclass
  ## (e.g. for Rancher Desktop, use:   storageclass: local-path)
  ##
  storageClass: local-path
  ## @param persistence.existingClaim
  ## Set a value for 'existingClaim' only if you want to re-use a Persistent Volume Claim that has
  ## already been set up by a k8s admin ahead of time.
  ## Leaving it blank will cause a pvc to be created dynamically using volumeClaimTemplates.
  ##
  existingClaim: ""
  ## @param persistence.accessModes PVC Access Mode for metacat volume
  ## Example:
  ##    accessModes:
  ##    - ReadWriteOnce   # allow only one node to mount in read/write mode
  ##    - ReadOnlyMany    # allow many nodes to mount in read-only mode
  ## ReadWriteOnce  is always required by metacat. ReadOnlyMany is useful for giving other
  ## services (e.g. metadig) read-only access to metacat data.
  ## Note that the underlying PersistentVolume (or pv auto-provisioner) must be able to provide
  ## these modes, in order for the PVC to bind successfully. (For Rancher Desktop, this means
  ## setting only ReadWriteOnce, not ReadOnlyMany)
  ##
  accessModes:
    - ReadWriteOnce
  ## @param primary.persistence.size PVC Storage Request for metacat volume
  ##
  size: 1Gi
