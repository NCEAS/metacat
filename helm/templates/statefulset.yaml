apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "metacat.fullname" . }}
  labels:
    {{- include "metacat.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "metacat.fullname" . }}-hl
  replicas: 1
  selector:
    matchLabels:
      {{- include "metacat.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
          {{- with .Values.podAnnotations }}
            {{- toYaml . | nindent 8 }}
          {{- end }}
      labels:
        {{- include "metacat.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
        - name: deps
          image: busybox:latest
          command:
            - sh
            - -c
            - |
              ## wait for PostgreSQL to be ready...
              ##
              PGHOST={{ include "metacat.postgresql.hostname" . }};
              PGPORT={{ .Values.database.port }};
              echo "* * * Checking if PostgreSQL is ready, at $PGHOST:$PGPORT * * *";
              until nc -z $PGHOST $PGPORT > /dev/null; do
              echo waiting for PostgreSQL at $PGHOST:$PGPORT; sleep 1; done;
              ##
              ## wait for RabbitMQ to be ready...
              ##
              RMQHOST={{ include "metacat.rabbitmq.hostname" . }};
              {{- $amqp := index .Values "dataone-indexer" "rabbitmq" "service" "ports" "amqp" }}
              RMQPORT={{ index .Values "dataone-indexer" "rabbitmq" "hostport" | default $amqp -}};
              echo "* * * Checking if RabbitMQ is ready at $RMQHOST:$RMQPORT * * *";
              until nc -z $RMQHOST $RMQPORT > /dev/null; do
                echo waiting for RabbitMQ at $RMQHOST:$RMQPORT; sleep 1; done;
              ##
              ## wait for Solr to be ready...
              ##
              SOLRHOST={{ include "metacat.solr.hostname" . }};
              SOLRPORT={{- index .Values "dataone-indexer" "solr" "service" "ports" "http" -}};
              SOLRURI="/solr/{{- index .Values "dataone-indexer" "solr" "customCollection" -}}
                   /admin/file?file=schema.xml&contentType=text/xml";
              echo "* * * Checking if Solr is ready at http://$SOLRHOST:$SOLRPORT$SOLRURI * * *";
              until [[ $(echo -e "GET $SOLRURI HTTP/1.1\r\nHost: $SOLRHOST\r\n\r\n" \
                | nc $SOLRHOST $SOLRPORT | grep -c "<schema name=\"dataone") == 1 ]]; do
                echo waiting for Solr Schema to be accessible at http://$SOLRHOST:$SOLRPORT$SOLRURI;
              sleep 2; done;
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "metacat.serviceAccountName" . }}
      {{- if .Values.affinity }}
      affinity: {{- include "helpers.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "helpers.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "helpers.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "helpers.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
      {{- end }}
      securityContext:
        {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
              name: metacat-web
              {{- if .Values.container.ports }}
                {{- toYaml .Values.container.ports | nindent 12 }}
              {{ end }}
            {{- if .Values.tomcat.jmxEnabled }}
            - containerPort: {{ .Values.tomcat.jmxPort }}
              name: jmx
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            # can't do {release}-{function}-{instance} for statefulset, since k8s auto appends
            # {podname}-{instance} (e.g. metacatknb-metacat-metacatknb-0)
            - name: {{ .Release.Name }}-metacat
              mountPath: /var/metacat
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
              readOnly: false
            - name: {{ .Release.Name }}-config-volume
              mountPath: /usr/local/etc/metacat-configMap
              readOnly: true
            - name: {{ .Release.Name }}-d1-cert-volume
              mountPath: /var/metacat/certs/
              readOnly: true
            - name: {{ .Release.Name }}-d1-pub-cert-volume
              mountPath: /var/metacat/pubcerts/
              readOnly: true
          env:
            - name: METACAT_IN_K8S
              value: "true"
            - name: METACAT_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            - name: METACAT_APP_CONTEXT
              value: {{ index .Values.metacat "application.context" }}
            - name: TOMCAT_MEM_MIN
              value: {{ .Values.tomcat.heapMemory.min }}
            - name: TOMCAT_MEM_MAX
              value: {{ .Values.tomcat.heapMemory.max }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "metacat.cnpg.secret.name" . }}
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "metacat.cnpg.secret.name" . }}
                  key: password
            - name: METACAT_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-metacat-secrets
                  key: rabbitmq-password
                  optional: false
            - name: CATALINA_OPTS
              value: {{ join " " .Values.tomcat.extraCatalinaOpts }}
                      {{- if .Values.tomcat.jmxEnabled }}
                        {{- if .Values.tomcat.extraCatalinaOpts }}
                          {{- printf " " }}
                        {{- end }}
                        {{- join " " .Values.tomcat.jmxCatalinaOpts }}
                      {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-metacat-secrets
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            {{- omit .Values.startupProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
      volumes:
      - name: {{ .Release.Name }}-config-volume
        configMap:
          name: {{ .Release.Name }}-metacat-configfiles
          defaultMode: 0644
      - name: {{ .Release.Name }}-d1-pub-cert-volume
        configMap:
          name: {{ .Release.Name }}-d1-certs-public
          optional: true
      - name: {{ .Release.Name }}-d1-cert-volume
        secret:
          secretName: {{ .Release.Name }}-d1-client-cert
          optional: true
{{- if not (.Values.persistence.enabled) }}
      - name: {{ .Release.Name }}-metacat
        emptyDir: {}
{{ else }}
  {{- if .Values.persistence.existingClaim }}
      - name: {{ .Release.Name }}-metacat
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim }}
  {{ else }}
  volumeClaimTemplates:
  - metadata:
      # can't do {release}-{function}-{instance} for statefulset, since k8s auto appends
      # {podname}-{instance} (e.g. metacatknb-metacat-metacatknb-0)
      name: {{ .Release.Name }}-metacat
    spec:
      {{- if .Values.persistence.volumeName }}
      volumeName: {{ .Values.persistence.volumeName }}
      {{- end }}
      accessModes:
        {{- range .Values.persistence.accessModes }}
        - {{ . | quote }}
        {{- end }}
      volumeMode: Filesystem
        {{- $storageClass := ( default .Values.persistence.storageClass .Values.global.storageClass ) -}}
        {{- if $storageClass }}
      storageClassName: {{ ternary "\"\"" $storageClass (eq "-" $storageClass) }}
        {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
  {{- end }}
{{- end }}
