apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "metacat.fullname" . }}
  labels:
    {{- include "metacat.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "metacat.fullname" . }}-hl
  replicas: 1
  selector:
    matchLabels:
      {{- include "metacat.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
          {{- with .Values.podAnnotations }}
            {{- toYaml . | nindent 8 }}
          {{- end }}
      labels:
        {{- include "metacat.selectorLabels" . | nindent 8 }}
    spec:
      {{- if or (index .Values.global "dataone-indexer.enabled") (.Values.global.PostgresqlUpgradeNeeded) }}
      initContainers:
        - name: dependencies
          image: busybox:latest
          command:
            - sh
            - -c
            - >
              ## wait for RabbitMQ to be ready...
              ##
              RMQHOST={{ include "metacat.rabbitmq.hostname" . }};
              {{- $amqp := index .Values "dataone-indexer" "rabbitmq" "service" "ports" "amqp" }}
              RMQPORT={{ index .Values "dataone-indexer" "rabbitmq" "hostport" | default $amqp -}};
              until nc -z $RMQHOST $RMQPORT > /dev/null; do
              echo waiting for RabbitMQ at $RMQHOST:$RMQPORT; sleep 1; done;
              ##
              ## wait for Solr to be ready...
              ##
              SOLRHOST={{ include "metacat.solr.hostname" . }};
              SOLRPORT={{- index .Values "dataone-indexer" "solr" "service" "ports" "http" -}};
              SOLRURI="/solr/{{- index .Values "dataone-indexer" "solr" "customCollection" -}}
                   /admin/file?file=schema.xml&contentType=text/xml";
              until [[ $(echo -e "GET $SOLRURI HTTP/1.1\r\nHost: $SOLRHOST\r\n\r\n"{{ print " " -}}
              | nc $SOLRHOST $SOLRPORT | grep -c "<schema name=\"dataone") == 1 ]]; do
              echo waiting for Solr Schema to be accessible at http://$SOLRHOST:$SOLRPORT$SOLRURI;
              sleep 1; done;
        {{- end }}
        {{- if and .Values.postgresql.upgrader .Values.postgresql.upgrader.enabled }}
        - name: "pgupgrade"
          image: "ubuntu:24.10"
{{/*          image: postgres:14*/}}
          securityContext:
            {{-  toYaml .Values.postgresql.upgrader.securityContext | nindent 12 }}
          command:
            - sh
            - -c
            - >
              export DEBIAN_FRONTEND="noninteractive";
              echo "America/Los_Angeles" > /etc/timezone;
              echo "setting timezone...";
              apt-get update && apt-get install -y tzdata;
              echo "tzdata installed...";
              dpkg-reconfigure --frontend noninteractive tzdata;
              echo "installing lsb-release wget gnupg...";
              apt-get update && apt-get install -y lsb-release wget gnupg gnupg2 gnupg1;
              echo "...installed.";
              echo "re-installing ca-certificates...";
              apt-get install -y --reinstall ca-certificates;
              echo "...done.";
              echo "Adding PostgreSQL apt repository...";
              wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | gpg --dearmor -o /etc/apt/keyrings/postgresql.gpg;
              echo "deb  [signed-by=/etc/apt/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list;
              echo "...done.";
              echo "Adding postgres user & group...";
              groupadd -g {{ .Values.postgresql.upgrader.securityContext.fsGroup }} postgres;
              useradd -u {{ print " " -}}
              {{ .Values.postgresql.primary.containerSecurityContext.runAsUser }}{{ print " " -}}
              -g {{ .Values.postgresql.upgrader.securityContext.fsGroup }} -m postgres;
              chsh -s /bin/bash postgres;
              echo "...done.";
              echo "Installing postgresql 14...";
              apt-get update && apt-get install -y --no-install-recommends postgresql-14 postgresql-contrib-14;
              service postgresql stop;
              mv /var/lib/postgresql/14 /var/lib/postgresql/14_ORIG
              ln -s /opt/postgresql/14  /var/lib/postgresql/14
              chmod 750  /var/lib/postgresql/14/main/
              echo "local       all           all         trust" > /etc/postgresql/14/main/pg_hba.conf;
              service postgresql start;
              while true; do sleep 1; done;
              chown root:ssl-cert /etc/ssl/private/ssl-cert-snakeoil.key;
              chmod 740 /etc/ssl/private/ssl-cert-snakeoil.key;
              gpasswd -a postgres ssl-cert;
              service postgresql stop;
              echo "...done.";
              echo "Installing postgresql 14...";
              apt-get update && apt-get install -y --no-install-recommends postgresql-16 postgresql-contrib-16;
              echo "...done.";
              chown -R postgres:postgres /var/run/postgresql /etc/postgresql /var/log/postgresql;
              service postgresql stop;
              su postgres;
              cd ~;
              if [ -f /var/lib/postgresql/14/main/postmaster.pid ]; then echo "Removing leftover 14/main/postmaster.pid"; rm /var/lib/postgresql/14/main/postmaster.pid; fi;
              /usr/lib/postgresql/16/bin/pg_upgrade --old-bindir=/usr/lib/postgresql/14/bin/ --old-datadir=/var/lib/postgresql/14/main --new-datadir=/var/lib/postgresql/16/main --check;
          volumeMounts:
            - name: {{ .Release.Name }}-postgres-pgupgrade
              mountPath: /opt/postgresql
        {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "metacat.serviceAccountName" . }}
      {{- if .Values.affinity }}
      affinity: {{- include "helpers.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "helpers.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "helpers.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "helpers.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
      {{- end }}
      securityContext:
        {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
              name: metacat-web
                {{- if .Values.container.ports }}
                  {{- toYaml .Values.container.ports | nindent 12 }}
                {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            # can't do {release}-{function}-{instance} for statefulset, since k8s auto appends
            # {podname}-{instance} (e.g. metacatknb-metacat-metacatknb-0)
            - name: {{ .Release.Name }}-metacat
              mountPath: /var/metacat
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
              readOnly: false
            - name: {{ .Release.Name }}-config-volume
              mountPath: /usr/local/etc/metacat-configMap
              readOnly: true
            - name: {{ .Release.Name }}-d1-cert-volume
              mountPath: /var/metacat/certs/
              readOnly: true
            - name: {{ .Release.Name }}-d1-pub-cert-volume
              mountPath: /var/metacat/pubcerts/
              readOnly: true
          env:
            - name: METACAT_IN_K8S
              value: "true"
            - name: METACAT_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            - name: METACAT_APP_CONTEXT
              value: {{ index .Values.metacat "application.context" }}
            - name: TOMCAT_MEM_MIN
              value: {{ .Values.tomcat.heapMemory.min }}
            - name: TOMCAT_MEM_MAX
              value: {{ .Values.tomcat.heapMemory.max }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.auth.username }}
            - name: METACAT_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-metacat-secrets
                  key: rabbitmq-password
                  optional: false
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-metacat-secrets
                  {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
                    {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 12 }}
                  {{- end }}
              {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
                {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 12 }}
              {{- end }}
      volumes:
      - name: {{ .Release.Name }}-config-volume
        configMap:
          name: {{ .Release.Name }}-metacat-configfiles
          defaultMode: 0644
      - name: {{ .Release.Name }}-d1-pub-cert-volume
        configMap:
          name: {{ .Release.Name }}-d1-certs-public
          optional: true
      - name: {{ .Release.Name }}-d1-cert-volume
        secret:
          secretName: {{ .Release.Name }}-d1-client-cert
          optional: true
      {{- if and .Values.postgresql.upgrader .Values.postgresql.upgrader.enabled }}
      - name: {{ .Release.Name }}-postgres-pgupgrade
        persistentVolumeClaim:
          claimName: {{ required "claimName_REQUIRED" .Values.postgresql.upgrader.claimName }}
      {{- end }}
{{- if not (.Values.persistence.enabled) }}
      - name: {{ .Release.Name }}-volume
        emptyDir: {}
{{ else }}
  {{- if .Values.persistence.existingClaim }}
      - name: {{ .Release.Name }}-volume
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim }}
  {{ else }}
  volumeClaimTemplates:
  - metadata:
      # can't do {release}-{function}-{instance} for statefulset, since k8s auto appends
      # {podname}-{instance} (e.g. metacatknb-metacat-metacatknb-0)
      name: {{ .Release.Name }}-metacat
    spec:
      {{- if .Values.persistence.volumeName }}
      volumeName: {{ .Values.persistence.volumeName }}
      {{ end }}
      accessModes:
        {{- range .Values.persistence.accessModes }}
        - {{ . | quote }}
        {{- end }}
      volumeMode: Filesystem
        {{- $storageClass := .Values.persistence.storageClass -}}
        {{- if $storageClass }}
      storageClassName: {{ ternary "\"\"" $storageClass (eq "-" $storageClass) }}
        {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
  {{- end }}
{{- end }}
